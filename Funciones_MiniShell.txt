

FUNCIONES PERMITIDAS + LIBFT

<readline/readline.h>
	@ readline 		--> Lee una línea del usuario con edición interactiva ??
	@ rl_clear_history 	--> Limpia el historial
	@ rl_on_new_line	--> Empieza una nueva línea
	@ rl_replace_line 	--> Reemplaza el contenido de la línea de entrada
	@ rl_redisplay 		--> Redibuja la línea de entrada en pantalla

<readline/history.h>
	@ add_history 		--> Añade la última entrada al historial

<stdio.h> 
	@ printf
	@ perror	--> Imprime en pantalla un mensaje de error (errno)

<stdlib.h>
	@ malloc
	@ free
	@ getenv	--> Devuelve el valor de la variable de entorno (PATH, HOME,...)

<string.h>
	@ strerror	--> Devuelve un mensaje de error (errno)

<unistd.h>
	@ write
	@ read
	@ close
	@ access 	--> Comprueba permisos de un archivo
	@ unlink 	--> Elimina (desvincula) un archivo
	@ dup 		--> Duplica un descriptor de archivo
	@ dup2 		--> Redirecciona la entrada o salida de un archivo
	@ pipe		--> Crea un canal para conectar dos procesos
	@ fork		--> Crea varios procesos en paralelo (padre e hijos)
	@ execve	--> Ejecuta un programa dentro de un proceso
	@ exit		--> Cierra proceso
	@ getcwd	--> Obtiene direccion actual de trabajo
	@ chdir		--> Cambia el directorio actual
	@ isatty	--> Verifica si un descriptor es un terminal
	@ ttyname	--> Devuelve nombre de archivo asociado a un terminal
	@ ttyslot	--> Devuelve el número de terminal usado
	
<fcntl.h>
	@ open		--> Abre un archivo y devuelve fd
	
<sys/stat.h> // Informacion sobre archivos //
	@ stat		--> Obtiene información de un archivo por su path
	@ lstat		--> Obtiene informacion de un elace simbolico y no del archivo
	@ fstat		--> Obtiene informacion de un archivo usando un fd

<sys/wait.h> // Se usan para esperar a que acabe un proceso hijo //
	@ wait		--> Detiene el proceso actual hasta que acabe un proceso hijo
	@ waitpid	--> Espera a que acabe un o varios procesos especificos (pid) 
	@ wait3		--> Como wait pero almacena info del redimiento del proceso
	@ wait4		--> Combinacion de waitpid y wait3

<signal.h>// Manejo de signals //
	@ signal	--> Ejecuta una funcion al recibir una senal
	@ sigaction	--> Forma mas avanzada y segura de signal
	@ kill		--> Envia una signal a un proceso (no solo mata)

<dirent.h> // Manejo de directorios //
	@ opendir	--> Abre un directorio
	@ readdir	--> Lee entradas de un directorio
	@ closedir	--> Cierra directorio

<sys/ioctl.h>
	@ ioctl		--> Controla dispositivos y terminales con operaciones especiales ??

<termios.h> // Manejo de atributos de la terminal //
	@ tcsetattr	--> Obtiene atributos de la terminal asociada al fd ??
	@ tcgetattr	--> Cambia los atributos de la terminal ??

<termcap.h>  // Interfaces en terminal con control de cursor y colores ?? //
	@ tgetent	--> Inicializa la base de datos de capacidades del terminal ??
	@ tgetflag	--> Comprueba si el terminal tiene una capacidad booleana ??
	@ tgetnum	--> Obtiene valores numéricos de capacidades del terminal ??
	@ tgetstr	--> Obtiene cadenas de control para capacidades ??
	@ tgoto		--> Construye una secuencia de movimiento del cursor ??
	@ tputs		--> Envía secuencias de control al terminal ??
	
	
